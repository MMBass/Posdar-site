{"version":3,"sources":["axios.js","components/Header/Header.js","BannerContext.js","components/Banner/Banner.js","components/SaveTaskForm/SaveTaskForm.js","components/GetTasksForm/GetTasksForm.js","components/TaskCard/TaskCard.js","components/TasksList/TasksList.js","components/Footer/Footer.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["posdarUrlInstance","axios","create","baseURL","headers","Header","className","BannerContext","createContext","Banner","useContext","message","setMessage","useState","scroll","setScroll","useEffect","setTimeout","closeBanner","window","addEventListener","handleScroll","removeEventListener","pageYOffset","length","id","style","backgroundColor","onClick","SaveTaskForm","formData","setFormData","wordsList","setWordsList","inputList","setInputList","handleInputs","e","target","name","value","saveTask","a","preventDefault","post","token","catch","err","console","log","response","status","data","onSubmit","placeholder","onChange","disabled","type","map","x","i","newList","text","handleWordsList","GetTasksForm","props","formEnd","setFormEnd","getTasks","get","setFatherTasks","tasks","TaskCard","taskEnd","setTaskEnd","delTask","delete","_id","group","t","user","email","TasksList","setTasks","task","date","Footer","App","first","setFirst","then","res","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cf1838e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const posdarUrlInstance = axios.create({\r\n    // baseURL: 'https://posdar.herokuapp.com',\r\n    baseURL: 'http://localhost:5000',\r\n    headers: {'X-Custom-Header': 'foobar'}\r\n});","import { useState } from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Posdar</h1>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import { createContext } from \"react\";\r\n\r\nexport const BannerContext = createContext([\"darkgray\",\"\"]);","import React, { useContext, useEffect, useState } from 'react';\r\nimport './Banner.css';\r\nimport { BannerContext } from \"../../BannerContext\";\r\n\r\nfunction Banner() {\r\n  const { message, setMessage } = useContext(BannerContext);\r\n  const [scroll, setScroll] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      closeBanner();\r\n    }, 3000);\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  const handleScroll = () => {\r\n    setScroll(window.pageYOffset > 140);\r\n  };\r\n\r\n  function closeBanner() {\r\n    setMessage([\"darkgray\", \"\"]);\r\n  }\r\n\r\n  if (message[1].length < 1) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div id=\"Banner\" className={scroll ? \"b-scroll\" : \"\"} style={{ backgroundColor: message[0] }}>\r\n      <strong onClick={() => closeBanner()}>X</strong>\r\n      <p>{message[1]}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;","import { useState, useContext } from 'react';\r\nimport { posdarUrlInstance } from \"../../axios\";\r\nimport { BannerContext } from \"../../BannerContext\";\r\nimport './SaveTaskForm.css';\r\n\r\nfunction SaveTaskForm() {\r\n    const [formData, setFormData] = useState([]);\r\n    const [wordsList, setWordsList] = useState([]);\r\n    const [inputList, setInputList] = useState([\"\"]);\r\n    const { message, setMessage } = useContext(BannerContext);\r\n\r\n    const addInput = () => {\r\n        setInputList([...inputList, \"\"]);\r\n    };\r\n\r\n    const handleInputs = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const handleWordsList = (e, i) => {\r\n        const newList = wordsList;\r\n        newList[i] = e.target.value;\r\n        setWordsList(newList);\r\n        setFormData({ ...formData, text: wordsList });\r\n    }\r\n\r\n    const saveTask = async (e) => {\r\n        e.preventDefault();\r\n        const response = await posdarUrlInstance.post('/register', formData, {\r\n            headers: {\r\n                \"token\": formData.token\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                setMessage([\"#ff5e5e\", \"Something went wrong\"]);\r\n            });\r\n\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                setMessage([\"#e48ff1\", response.data.message]);\r\n            } else {\r\n                setMessage([\"darkgray\", response.data.message]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form id=\"saveTasksForm\" onSubmit={saveTask}>\r\n            <h2>Add task</h2>\r\n            <input name=\"userName\" placeholder=\"User name\" onChange={handleInputs}></input>\r\n\r\n            <input name=\"email\" placeholder=\"Email\" onChange={handleInputs}></input>\r\n\r\n            <input name=\"group\" placeholder=\"Group ID\" onChange={handleInputs}></input>\r\n\r\n            <input name=\"token\" placeholder=\"Api key\" onChange={handleInputs}></input>\r\n\r\n            <input name=\"time\" placeholder=\"Time between requests\" onChange={handleInputs} disabled></input>\r\n\r\n            <h4>Word/s to search:</h4>\r\n\r\n            <div id=\"add-text-div\">\r\n                <p> Add another text </p>\r\n                <button type=\"button\" onClick={addInput}>+</button>\r\n            </div>\r\n            <p id=\"must\">*must contain only letters or numbers</p>\r\n            {inputList.map((x, i) => {\r\n                return (\r\n                    <input name={\"text\" + (i + 1)} placeholder={\"Text \" + (i + 1)} key={i} onChange={e => handleWordsList(e, i)}></input>\r\n                );\r\n            })}\r\n\r\n            <br></br>\r\n            <button type=\"submit\" id=\"submitButton\">Save</button>\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nexport default SaveTaskForm;","import { useState,useContext } from 'react';\r\nimport {posdarUrlInstance} from \"../../axios\";\r\nimport {BannerContext} from \"../../BannerContext\";\r\nimport './GetTasksForm.css';\r\n\r\nfunction GetTasksForm(props) {\r\n    const [formData, setFormData] = useState([]);\r\n    const [formEnd, setFormEnd] = useState(false);\r\n    const {message, setMessage} = useContext(BannerContext);\r\n    \r\n    const handleInputs = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const getTasks = async (e) => {\r\n        e.preventDefault();\r\n        const response = await posdarUrlInstance.get('/register', {headers:formData}).catch((err) => {\r\n            console.log(err)\r\n            setMessage([\"#ff5e5e\",\"Something went wrong\"]);\r\n        });\r\n        \r\n        if(response){\r\n           props.setFatherTasks(response.data.tasks);\r\n           setFormEnd(true);\r\n        }\r\n    }\r\n\r\n    if(formEnd){\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <form id=\"getTasksForm\" onSubmit={getTasks}>\r\n            <h4>*You must be connected to see the your tasks</h4>\r\n            <input name=\"userName\" placeholder=\"User name\" onChange={handleInputs}></input>\r\n\r\n            <input name=\"token\" placeholder=\"Api key\" onChange={handleInputs}></input>\r\n\r\n            <br></br>\r\n            <button type=\"submit\" id=\"getButton\">Get</button>\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nexport default GetTasksForm;","import React, { useState, useContext } from 'react';\r\nimport { posdarUrlInstance } from \"../../axios\";\r\nimport { BannerContext } from \"../../BannerContext\";\r\nimport './TaskCard.css';\r\n\r\nfunction TaskCard(props) {\r\n    const [taskEnd, setTaskEnd] = useState(false);\r\n    const { message, setMessage } = useContext(BannerContext);\r\n\r\n    const delTask = async () => {\r\n        const response = await posdarUrlInstance.delete('/register',\r\n            {\r\n                headers: {\r\n                    \"t_id\": props._id,\r\n                    // \"token\":\"token\"\r\n                }\r\n            }).catch((err) => {\r\n                setMessage([\"#ff5e5e\", \"Something went wrong\"]);\r\n            });\r\n\r\n        if (response) {\r\n            if (response.status == 200) {\r\n                setMessage([\"#ff5e5e\", \"Deleted\"]);\r\n                setTaskEnd(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (taskEnd === true) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"TaskCard\">\r\n\r\n            {props.group\r\n                ? <>\r\n                    <p>Group: {props.group}</p>\r\n                    <p>Text:</p>\r\n                    {props.text.map(t => {\r\n                        return <p>{t}</p>\r\n                    })}\r\n                    <p>User: {props.user}</p>\r\n                    <small>Email: {props.email}</small>\r\n                    <small>Task-id: {props._id}</small>\r\n                    <button className=\"dl-btn\" onClick={() => delTask()}>DELETE</button>\r\n                </>\r\n                : <>\r\n                    <div className=\"emptyCard\">\r\n                        <p></p>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <small></small>\r\n                        <small></small>\r\n                        <button className=\"dis-btn\" disabled>DELETE</button>\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskCard;","import React, { useEffect, useState, useContext } from 'react';\r\nimport GetTasksForm from \"../GetTasksForm/GetTasksForm\";\r\nimport TaskCard from '../TaskCard/TaskCard';\r\nimport { BannerContext } from \"../../BannerContext\";\r\nimport './TasksList.css';\r\n\r\nfunction TasksList() {\r\n    const [tasks, setTasks] = useState([]);\r\n    const { message, setMessage } = useContext(BannerContext);\r\n\r\n    const ifTasksEmpty = () => {\r\n        if (!tasks[0]) {\r\n            return (\r\n                <div id=\"TasksList\">\r\n                    <h2>Your Saved Tasks</h2>\r\n                    <GetTasksForm setFatherTasks={setTasks}></GetTasksForm>\r\n                    <TaskCard></TaskCard>\r\n                </div>)\r\n        }\r\n        if (tasks[0]) {\r\n            return (<div id=\"TasksList\">\r\n                <h2>Your Saved Tasks</h2>\r\n                {tasks.map((task) => (\r\n                    <TaskCard\r\n                        key={task._id}\r\n                        _id={task._id}\r\n                        user={task.user}\r\n                        date={task.date}\r\n                        group={task.group}\r\n                        email={task.email}\r\n                        text={task.text}\r\n                    ></TaskCard>\r\n                ))}\r\n            </div>)\r\n        }\r\n    }\r\n\r\n    return (ifTasksEmpty());\r\n};\r\n\r\nexport default TasksList;","import { useState } from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import { useState, useEffect, useContext} from 'react';\nimport { posdarUrlInstance } from \"../../axios\";\nimport './App.css';\nimport Header from \"../Header/Header\";\nimport Banner from \"../Banner/Banner\";\nimport SaveTaskForm from \"../SaveTaskForm/SaveTaskForm\";\nimport TasksList from \"../TasksList/TasksList\";\nimport Footer from \"../Footer/Footer\";\nimport {BannerContext} from \"../../BannerContext\";\n\nfunction App() {\n  const [message, setMessage] = useState([\"darkgray\",\"\"]);\n  const [first, setFirst] = useState(true);\n\n  function init() {\n    posdarUrlInstance.get('/').then((res) => {\n      if (res.status === 200) {\n        setMessage([\"darkgray\",\"server is on\"]);\n        setFirst(false);\n      }\n    }).catch((err) => {\n      console.log(err)\n      setMessage([\"#ff5e5e\",\"server error\"]);\n    });\n\n  }\n\n  useEffect(() => {\n    if(first === true) init();\n  });\n\n  return (\n    <BannerContext.Provider value={{message, setMessage}}>\n      <div className=\"App\">\n        <Header></Header>\n        <Banner></Banner>\n        <SaveTaskForm></SaveTaskForm>\n        <TasksList></TasksList>\n        <Footer></Footer>\n      </div>\n    </BannerContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}